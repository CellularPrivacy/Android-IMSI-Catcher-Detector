apply plugin: 'com.android.application'
apply plugin: 'realm-android'

def gitSha = null
try {
    gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
} catch (Exception e) {
    logger.warn("git not available", e)
}

def isCi = "true".equals(System.getenv("CI"))

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "com.SecUpwN.AIMSICD"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 43
        testApplicationId "com.SecUpwN.AIMSICD.test"

        buildConfigField 'String', 'BUILD_NUMBER', (getBuildNumber() == null ? 'null' : "\"${buildNumber}\"")
        buildConfigField 'String', 'GIT_SHA', (gitSha == null ? 'null' : "\"${gitSha}\"")
    }
    buildTypes {
        debug {
            try {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '\"' + open_cellid_api_key + '\"'
            } catch (MissingPropertyException e) {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            }
            versionNameSuffix '-debug'
        }
        release {
            buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    dexOptions {
        preDexLibraries !isCi
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        warning 'MissingTranslation', 'InvalidPackage'

        xmlReport false
        htmlReport !isCi

        textReport isCi
        textOutput 'stdout'
    }
    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
    productFlavors {
        system {
            versionName "$project.version-system"
        }
        normal {
            versionName "$project.version-normal"
        }
    }
}

dependencies {
    // DO NOT REMOVE BELOW COMMENTED-OUT CODE BEFORE ASKING!
    // Please group dependencies for better review like below.

    // Android Support Libraries
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'io.realm:android-adapters:1.3.0'

    // OpenCSV (comma-separated values) parser library
    compile 'au.com.bytecode:opencsv:2.4'

    // Easy to use Root Shell for Android Applications
    compile 'com.github.Stericson:RootShell:d708ae1f0a'

    // Dependency Injection for Android
    compile 'io.freefair.android-injection:injection:2.0.0-beta1'
    compile 'io.freefair.android-injection:logging:2.0.0-beta1'
    compile 'io.freefair.android-injection:okhttp:2.0.0-beta1'

    compile 'io.freefair.android-colors:material:1.2.0'

    // OSMBonusPack library to interact with OpenStreetMap data
    compile 'com.github.MKergall.osmbonuspack:OSMBonusPack:v5.6'

    // Transition library for animated transition effects
    compile 'com.github.kaichunlin.transition:core:0.9.2'

    // ShowcaseView library to highlight specific app elements
    //compile 'com.github.amlcurran.showcaseview:library:5.3.0'

    provided "org.projectlombok:lombok:1.16.8"
    apt "org.projectlombok:lombok:1.16.8"

    testCompile 'junit:junit:4.12'
}

apply from: "signing.gradle"
apply plugin: "io.freefair.android-checkstyle"
apply plugin: "io.freefair.android-javadoc-jar"

checkstyle {
    toolVersion = "6.15"
}

String getBuildNumber() {
    String travisBuildNumber = System.getenv("TRAVIS_BUILD_NUMBER")
    if(travisBuildNumber != null) {
        return "T-$travisBuildNumber"
    }

    String buildozerBuildNumber = System.getenv("BUILDOZER_BUILDNUMBER")
    if(buildozerBuildNumber != null) {
        return "B-$buildozerBuildNumber"
    }

    return null;
}
