import java.util.regex.Pattern

apply plugin: 'com.android.application'

//======================================================================
// TODO: (There must be a simpler way to do this!)
// These will import versionCode and versionName from AndroidManifest.xml
// Most important is that these function names are unique.
// versionCode can auto update the version number.
// Then put this function inside the defaultConfig { ... }}
// See: http://tinyurl.com/kuu2rve
//======================================================================

def getManifestVersionCode() {
     println "Importing with getManifestVersionCode()"
     def manifestFile = file("src/main/AndroidManifest.xml")
     def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
     def manifestText = manifestFile.getText()
     def matcher = pattern.matcher(manifestText)
     matcher.find()
     def version = Integer.parseInt(matcher.group(1))
     println sprintf("Returning version %d", version)
     return version
}

def getManifestVersionName() {
     println "Importing with getManifestVersionName()"
     def manifestFile = file("src/main/AndroidManifest.xml")
     def pattern = Pattern.compile("versionName=\"(.+)\"")
     def manifestText = manifestFile.getText()
     def matcher = pattern.matcher(manifestText)
     matcher.find()
     def zname = matcher.group(1)
     println sprintf("Returning version %s", zname)
     return zname
}

//======================================================================

android {
    compileSdkVersion 19
    buildToolsVersion '21.1.1'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        versionCode = getManifestVersionCode()
        versionName = getManifestVersionName()
        testApplicationId "com.SecUpwN.AIMSICD.test"
    }

    buildTypes {
        debug {
            try {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '\"' + open_cellid_api_key + '\"'
            } catch (MissingPropertyException e) {
                buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            }
        }
        release {
            buildConfigField 'String', 'OPEN_CELLID_API_KEY', '"NA"'
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
        }
    }
    sourceSets {
        main {
            assets.srcDirs = ['src/main/assets']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false
    }

// .. set up build flavors etc here

//======================================================================
// Instead of "app-release.apk" this method will rewrite the name to
// "MyCoolCompany-MyNewProduct-v<defaultConfig.versionName>-RELEASE.apk"
// which is much better suited for archiving and overall handling
//----------------------------------------------------------------------
// To restore the default behavior just delete the whole block below
// WARNING by E:V:A: This is NOT Working, generates: "AIMSICD-null.apk"
//======================================================================

    applicationVariants.all { variant ->
	variant.outputs.each { output ->
		def apk = output.outputFile;
		def newName;

		newName = apk.name.replace(".apk", "-v" + defaultConfig.versionName + "-" + variant.buildType.name.toUpperCase() + ".apk");
		//newName = apk.name.replace(".apk", "-" + defaultConfig.versionName + ".apk");

		newName = newName
		        .replace("-" + variant.buildType.name, "") // This removes "-release"
		        .replace(project.name, "AIMSICD");         // This replace app with "AIMSICD"

		output.outputFile = new File(apk.parentFile, newName);

		if (output.zipAlign) {
		    output.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""));
		}

		logger.info('INFO: Set outputFile to ' + output.outputFile + " for [" + variant.name + "]");
	}
    }


    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

dependencies {
    //    compile 'com.github.amlcurran.showcaseview:library:5.0.0'
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':third_party:rootshell')
    compile 'com.android.support:support-v4:19.1.0'
    compile 'org.osmdroid:osmdroid-android:4.2'
    compile 'eu.lp0.slf4j:slf4j-android:1.7+'
    compile 'org.apache.httpcomponents:httpmime:4.2.1'
    compile 'au.com.bytecode:opencsv:2.4'
}
